##  GIT HELP ##
git help             # show all commands grouped by section
git help -a          # show all commands 
git help -g          # show groups by concepts (attributes, everyday, tutorial, workflows ....)
git help "concept"   # ex: git help tutorial, git help glossary, 

git help command  # explain parameters of a command

# git grep

  
# Git Clone, clonar proyectos de algun repositorio con diferentes protocolos
git clone https://github.com/samoshkin/tmux-config.git
git clone https://github.com/prettier/vim-prettier
git clone ssh://git-master@haumea/~/ProbandoGit

# Configurar una Identidad GIT para el usuario actual
git config --global user.name "Ziggy"
git config --global user.email "jpelorat@gmail.com"

# Configurar detalles del usuario actual
git config --global color.ui auto
git config --global core.editor "vim"

# Listar las configuraciones del usuario actual
git config --list 

# Documentacion (Tutorial, chuleta, etc.)
wget https://cse.unl.edu/~cbourke/gitTutorial.pdf
wget https://about.gitlab.com/images/press/git-cheat-sheet.pdf
wget https://github.com/progit/progit2/releases/download/2.1.338/progit.pdf

# Version de GIT
git --version

# Inicializar un proyecto/repositorio en el directorio actual
git init

# Estado del repositorio/proyecto
git status

# Indica con color rojo o verde a la izq si el(los) file(s)/dir(s) está(n) en WT o Stage Area (SAi)
# Si no hay lista, es que el History Commits Area está al día
git status -s 

# to show information about files in the SA and the WT
git ls-files


##   source: https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History

##                              ##
##   VIEWING COMMIT's HISTORY   ##
##                              ##

# Bitácora del repositorio
git log

# Bitácora simplificada en una sola línea por COMMIT
git log --oneline 

#                               #
#   Bitácora de manera gráfica  #
#                               #

# 1 line by commit
git log --all --decorate --oneline --graph
# with detail of change in files
git log --stat --all --decorate --oneline --graph

# Alias via git config
# example
git config --global alias.logFullInfo 'log --stat --all --decorate --oneline --graph'

# Alias via Op System
# Linux
alias gitLog="git log --all --decorate --oneline --graph"
# Windows
function gitLog { git log --all --decorate --oneline --graph } 

# historial resumido de los commits, merge, checkout, etc, ... realizados
git reflog

# Agregar Archivo
git add [ARCHIVO]

# Borrar Archivo
git rm [ARCHIVO]

# Recuperar archivo 
# desde SA 
git checkout "filename"
# desde algún commit en history 
git checkout [ID SHA1 del COMMIT DESEADO] -- [ARCHIVO]

# Agregar un monton de Archivos
git add --all
git add . 

# Commit cambios del proyecto pasando un mensaje con -m
git commit -m "Commit $(date)"

# Commit de archivos reconocidos por el STAGE
git commit -a

# SHOW command
git show HEAD, git show HEAD~1....

# git objects
# Commits, blobs (files), trees (dir), tags

# TREE for a commit
git ls-tree HEAD~1
git ls-tree "specific commit"

# git restore (not avalaible in 2.17 version) 
# create a "file"; do add "file"; do git commit; 
#      do git status -s; do git rm "file"; do got commit; do gitLog; 
#			 do git status -s to see D "file";
#      do git show HEAD~1; do git restore --source=HEAD~1 "file"
#      do git status -s	 

##                   ## 
##  GIT DIFF COMAND  ##
##                   ##

# Diferencias del HEAD contra los diferentes COMMITs
git diff							# Working Tree contra STAGE
git diff --staged     # StageArea vs History Commits Area (last commit)

# it is convenient use 3 commands to see status (SA vs H, WT vs SA, SA status, files in SA) 
git diff --staged; git diff; git status -s; git ls-files; 

git diff HEAD HEAD~1	# Stage contra último COMMIT
git diff HEAD~2				# Working Tree	conta penúltimo COMMIT
git diff HEAD~3
git diff HEAD~4
git diff HEAD~5

# Diferencias entre COMMITs específicos
git diff 57ec922 f50359a
git diff f50359a 57ec922
git diff b31cd6e f28c378

##                      i                                                  ##
##  Manera de visualizar diferencias entre archivos de distintos commits  ##
##                       i                                                 ##
diff -y <( cat lista.txt ) <( git show [#COMMIT]:lista.txt ) | cat -n
# example
diff -y <( cat lista.txt ) <( git show 3354f99:lista.txt ) | cat -n

# git diff normal
git diff [#COMMIT 1] [#COMMIT 2]

# usando TOOLS admitidos por git
git difftool --tool=[HERRAMIENTA] [#COMMIT 1] [#COMMIT 2]
# for example
git difftool --tool=kdiff3 e0c553f 00ae039
git difftool --tool=kdiff3 --staged 

# best diff tools for linux: https://www.tecmint.com/best-linux-file-diff-tools-comparison/
# --> colordiff, wdiff, Vimdiff, Kompare, DiffMerge, Meld, Diffuse, XXdiff, KDiff3, TkDiff 

# Ayuda para usar git difftool (listar herramientas)
git difftool --tool-help

# edit config to work with some particular tool (for ex kdiff3)
git config --global diff.tool kdiff3
git config --global diff.tool.kdiff3.cmd "vim --diff $LOCAL $REMOTE"
git config --global -e --> to see config file

###                      ###  
###   BRANCHS (Ramas)    ###   
###                      ###

# Crear Branch/Rama
git branch [RAMA]

# Listar Ramas/Branches
git branch

# Cambiar a la Rama/Branch
git checkout [RAMA]

# Cambiar a la Rama/branch principal
git checkout master

# MERGE: Fusionar [RAMA] con la Rama/Branch master
git merge [RAMA]

# Borrar Rama/Branch
git branch -d [RAMA]

# Bitacora de cambios de un archivo específico
git log -- [ARCHIVO]

#                # 
# gitignore file #
#                # 

# Ignorar archivos temporales de vi: listarlos en .gitignore, agregarlo al STAGE y hacerle COMMIT
echo ".*.swp" .gitignore
git add .gitignore
git commit -a (comentar en el editor usando el template de GIT)

# Recuperar archivo borrado de un COMMIT específico
git checkout [ID COMMIT] -- [ARCHIVO]


#                               #
# Listar logs de manera gráfica #
#                               #
git log --all --decorate --oneline --graph

#
# Crear Alias de presentación gráfica de logs de commits
#
# Examples 
	# Linux
	alias gitLog="git log --all --decorate --oneline --graph"
	# Windows
	function gitLog { git log --all --decorate --oneline --graph } 

####                      ####  
#### Repositorios Remotos ####
####                      ####  

# Clonamos el proyecto frutas desde gitlab.com
git clone git@gitlab.com:jpelorat/frutas  # automáticamente se crea dir frutas 
cd frutas

# Verificar las fuentes remotas del proyecto
git remote -v

# Otra vez el GRAPH de commits
alias graph="git log --all --decorate --oneline --graph"

# Muestro el estado y el historial del log
git status; echo -e "\n-----------\n"; gitLog; echo -e "\n-----------\n";

# Luego de modificar un archivo hacemos commit y vemos el estado
git commit -a

# Incorporamos las modificaciones hechas en el commit anterior al repositorio en gitlab.com
git push origin main

# Traer modificaciones del proyecto fuente y lo visualizamos
git fetch origin

# varios comandos a la vez, con separación de líneas
git status; echo -e "\n-----------\n"; gitLog; echo -e "\n-----------\n";

# Si todo esta chévere hacemos merge
git merge origin/main
git commit -a

# comando pull para hacer fetch y merge a la vez
git pull 

# git push -->  actualizar el repo remoto
git push origin master

# FORK para un nuevo colaborador min 18 Mahler

	# SYNC

	# PULL REQUEST


*********************************************************

cat ~/.gitconfig 


#                                               #
###  create repository from local git project ###
# 
GITHUB                                              # 	                                        
   https://docs.github.com/en/get-started/importing-your-projects-to-github/importing-source-code-to-github/adding-locally-hosted-code-to-github
   https://www.youtube.com/watch?v=vbQ2bYHxxEA
https://stackoverflow.com/questions/33101962/how-to-create-a-new-gitlab-repo-from-my-existing-local-git-repo-using-cli
	



#                                     # 
####  HISTORY OF GIT COMMANDS USED  ###
####  TO CREATE YOUR OWN "CHULETA"  ###
#                                     # 

history | grep git | cat -n >docs/chuleta-git.txt
git sta
git add .
git stage

history | grep git | sort -u -k2 | sort -n docs/chuleta-git.txt
git log commit
git commit -m "chuleta"
git checkout -- docs/chuleta-git.txt
git reset HEAD docs/chuleta-git.txt
git reset HEAD~2 docs/chuleta-git.txt
vi docs/chuleta-git.txt 
bajar-videos like git
git -a commit -m "AA"
git commit -a -m "AA"
git init Hola
git commit -a -m "Agregué archivo-01 y archivo-02"
git commit -a -m "Modifiqué archivo-01 y archivo-02"
git commit -a -m "Agregué archivo-03"
git commit -a -m "Modifiqué archivo-01, archivo-02 y archivo-03"
git add chuleta-git.txt 
git rm archivo-02.txt 
git commit 

#
### using cat with history file: cat -n ~/.bash_history   
#
cat -n ~/.bash_history | grep git | sort -u -k2 | sort -n | cut -f2- chuleta-git.txt
git status 
git checkout -- chuleta-git.txt
more chuleta-git.txt 
git commit -a
git add archivo-01.txt 
git diff --staged 
git reset HEAD archivo-01.txt
git checkout -- archivo-01.txt
git diff

history | grep git | sort -u -k2 | sort -n | cut -d' ' -f4- chuleta-git.txt 
